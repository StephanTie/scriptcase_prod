#!/bin/bash
#
# Install php applicaties that are generated by scriptcase into production
# Author: Stephan Tiebosch
# 
echo "-------------------- Install Scriptcase php application with mysql -------------- "
if [ -z "$1" ]; then
  echo "Usage $0 <no>"
  echo " <no> is project number coresponds to docker-compose.yml (1) or dc_project<no> (2..n)"
  exit
fi
no=$1;
if [ "$no" == "1" ]; then
  source .env
else
  source .env${no}
fi
# Fetch a standard php.ini from a standard php-fpm container and add ioncube_loader to it
mkdir -p ${PHP_APP_PROJECT_DIR}/history
mkdir -p ${PHP_APP_PROJECT_DIR}//${SCRIPTCASE_PRODLIB}
chmod 755 ${PHP_APP_PROJECT_DIR} 
chown ${BITNAMI_PHP_USER}:${BITNAMI_PHP_GROUP} ${PHP_APP_PROJECT_DIR} 
mkdir -p ${PHP_INI_PROJECT_DIR}
chmod 755 ${PHP_INI_PROJECT_DIR}
chown ${BITNAMI_PHP_USER}:${BITNAMI_PHP_GROUP} ${PHP_INI_PROJECT_DIR}
mkdir -p ${PHP_EXT_PROJECT_DIR}
chmod 755 ${PHP_EXT_PROJECT_DIR}
chown ${BITNAMI_PHP_USER}:${BITNAMI_PHP_GROUP} ${PHP_EXT_PROJECT_DIR}

# Install Scriptcase php application (scriptcase versions that uses php 7.3 or higher)
wget http://downloads3.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz
tar xzf ioncube_loaders_lin_x86-64.tar.gz -C . 
mv ioncube/*${PHP_PROJECT_VERSION}*  ${PHP_EXT_PROJECT_DIR}
rm ioncube_loaders_lin_x86-64.tar.gz
rm -rf ioncube

docker run -it --name tmpfetch-ini -d --rm docker.io/${PHP_PROJECT_IMAGE}:${PHP_PROJECT_IMAGE_VERSION}
docker container cp tmpfetch-ini:${BITNAMI_PHP_INI_DIR}/php.ini ${PHP_INI_PROJECT_DIR}/php.ini
sed -i "s/^zend_extension =.*/zend_extension =\/phpext\/ioncube_loader_lin_""${PHP_PROJECT_VERSION}"".so/g" ${PHP_INI_PROJECT_DIR}/php.ini 
docker stop tmpfetch-ini

dir="app_install/project""$no"
echo $dir
for file in `find $dir -maxdepth 1 -type f`; do
echo $file
  if [[ $file == *prod*.tar* ]]; then
    tar xf $file -C app/project${no}/${SCRIPTCASE_PRODLIB}
    mv $file $dir/history
  else  
    if [[ $file == *.tar.gz ]]; then
      tar xfz $file -C app/project${no}
      mv $file $dir/history
    fi
  fi
done
# S.T. : Special change for app_Login as it seems redirect is not to working with nginx-proxy
# Maybe myapp_projectx.conf changes can overcome this but this is not found yet
rm -f app/project${no}/${SCRIPTCASE_PRODLIB}/friendly_url/${SCRIPTCASE_STARTAPP}_ini.txt
# Create .project.env file for wkhtmltpdf
mkdir app/project${no}/pdf_ini
chmod 755  app/project${no}/pdf_ini 2>/dev/null
chown ${BITNAMI_PHP_USER}:${BITNAMI_PHP_GROUP}  app/project${no}/pdf_ini 2>/dev/null
echo "wkhtmltopdf_server=${CONTAINER_WKHTMLTOPDF_NAME}" > app/project${no}/pdf_ini/.project.env
echo "wkhtmltopdf_port=${CONTAINER_WKHTMLTOPDF_PORT}" >> app/project${no}/pdf_ini/.project.env
echo "wkhtmltopdf_exec_time=${SCRIPTCASE_WKHTMLTOPDF_EXEC_TIME}" >> app/project${no}/pdf_ini/.project.env
 
IFS='
' # split on newline only
for xd in `find ./app/project${no} -type f`; do
  chmod 644 "$xd" 
  chown ${BITNAMI_PHP_USER}:${BITNAMI_PHP_GROUP} "$xd"
done
for xd in `find ./app/project${no} -type d`; do
  chmod 755 "$xd"
  chown ${BITNAMI_PHP_USER}:${BITNAMI_PHP_GROUP} "$xd"
done
# Ensure all binaries and shell scripts in app/_lib/prod are executable
find  app/project${no}/${SCRIPTCASE_PRODLIB}/prod/third -type f  \( -exec sh -c 'file -b "$1" | grep -q executable' Test {} \; -exec chmod 755 {} \; \)

if [ "$no" == "1" ]; then
  echo "-------------------- Install MYSQL DATABASE APPLICATION -------------- "
  mkdir -p ${DB_DIR}
  chmod 755 ${DB_DIR}
  chown ${BITNAMI_MYSQL_USER}:${BITNAMI_MYSQL_GROUP} ${DB_DIR}

  echo "Executing docker-compose up -d"
  docker-compose build
  docker-compose up -d
  echo "Database install sleep 10 sec first"
  dir="mysql_install"
  sleep 10
  for file in `find $dir -maxdepth 1  -type f`; do
    echo $file
    if [[ $file = *.sql ]]; then
      database=${file##*/}
      echo $database $file
      IMPORT_COMMAND='exec mysql -u "$MYSQL_USER" -p"$MYSQL_PASSWORD"'
      docker exec -i mysql-project sh -c "$IMPORT_COMMAND" < $file
      mv $file ${dir}/history 
    fi
  done
else # $no != 1
  # Startup containers 
  echo "Executing docker-compose -f dc_project${no} up -d"
  docker-compose -f dc_project${no}.yml --env-file .env${no} build
  docker-compose -f dc_project${no}.yml --env-file .env${no} up -d
fi
# replace binary wkhtmltopdf-amd64 with a script that has a connection to the wkhtmltopdf container 
cp app/project${no}/${SCRIPTCASE_PRODLIB}/${SCRIPTCASE_WKHTMLTOPDF_SCRIPT} app/project${no}/${SCRIPTCASE_PRODLIB}/${SCRIPTCASE_WKHTMLTOPDF_SCRIPT}.org 
cp wkhtmltopdf-amd64.sh  app/project${no}/${SCRIPTCASE_PRODLIB}/${SCRIPTCASE_WKHTMLTOPDF_SCRIPT} 

# Install completed
echo "------------------ Install of by Scriptcase generated php-app Completed! ------------------ "

if [ "$no" == "1" ]; then
  docker-compose ps 
else
  docker-compose -f dc_project${no}.yml --env-file .env${no} ps
fi
docker inspect --format="{{.State.Running}}" ${CONTAINER_DB_NAME} > /dev/null
if [ $? -eq 0 ];
then
     echo "Existing: "${CONTAINER_DB_NAME}
else
     echo "Not existing: "${CONTAINER_DB_NAME}
fi
docker inspect --format="{{.State.Running}}" ${CONTAINER_NGINX_PROJECT_NAME} > /dev/null
if [ $? -eq 0 ];
then
     echo "Existing: "${CONTAINER_NGINX_PROJECT_NAME}
else
     echo "Not existing: "${CONTAINER_NGINX_PROJECT_NAME}
fi
docker inspect --format="{{.State.Running}}" ${CONTAINER_PHPFPM_PROJECT_NAME}  > /dev/null
if [ $? -eq 0 ];
then
     echo "Existing: "${CONTAINER_PHPFPM_PROJECT_NAME}
else
     echo "NOT Existing: "${CONTAINER_PHPFPM_PROJECT_NAME}
fi
docker inspect --format="{{.State.Running}}" ${CONTAINER_WKHTMLTOPDF_NAME}  > /dev/null
if [ $? -eq 0 ];
then
     echo "Existing: "${CONTAINER_WKHTMLTOPDF_NAME}
else
     echo "NOT Existing: "${CONTAINER_WKHTMLTOPDF_NAME}
fi
docker inspect --format="{{.State.Running}}" ${CONTAINER_PHPMYADMIN_NAME}  > /dev/null
if [ $? -eq 0 ];
then
     echo "Existing: "${CONTAINER_PHPMYADMIN_NAME}
else
     echo "NOT Existing: "${CONTAINER_PHPMYADMIN_NAME}
fi
echo "Go to htpps://"${MAIN_DOMAIN_PROJECT}/${SCRIPTCASE_PRODLIB}"/prod"
echo "Use /app for pdf server in production settings "
echo "Use mysql-project for server/host name in your connection and save it and exit your browser and check if the settings are saved" 
echo "Browse to https://"${MAIN_DOMAIN_PROJECT}
